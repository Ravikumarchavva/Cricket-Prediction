2024-11-04 17:39:47,013 INFO    MainThread:11924 [wandb_setup.py:_flush():79] Current SDK version is 0.18.3
2024-11-04 17:39:47,014 INFO    MainThread:11924 [wandb_setup.py:_flush():79] Configure stats pid to 11924
2024-11-04 17:39:47,014 INFO    MainThread:11924 [wandb_setup.py:_flush():79] Loading settings from C:\Users\chavv\.config\wandb\settings
2024-11-04 17:39:47,014 INFO    MainThread:11924 [wandb_setup.py:_flush():79] Loading settings from D:\github\Cricket-Prediction\training\pytorch\wandb\settings
2024-11-04 17:39:47,014 INFO    MainThread:11924 [wandb_setup.py:_flush():79] Loading settings from environment variables: {}
2024-11-04 17:39:47,014 INFO    MainThread:11924 [wandb_setup.py:_flush():79] Applying setup settings: {'mode': None, '_disable_service': None}
2024-11-04 17:39:47,014 INFO    MainThread:11924 [wandb_setup.py:_flush():79] Inferring run settings from compute environment: {'program_relpath': 'training\\pytorch\\prerp_augmented.py', 'program_abspath': 'D:\\github\\Cricket-Prediction\\training\\pytorch\\prerp_augmented.py', 'program': 'D:\\github\\Cricket-Prediction\\training\\pytorch\\prerp_augmented.py'}
2024-11-04 17:39:47,014 INFO    MainThread:11924 [wandb_setup.py:_flush():79] Applying login settings: {}
2024-11-04 17:39:47,014 INFO    MainThread:11924 [wandb_init.py:_log_setup():532] Logging user logs to D:\github\Cricket-Prediction\training\pytorch\wandb\run-20241104_173947-ddssu9ij\logs\debug.log
2024-11-04 17:39:47,014 INFO    MainThread:11924 [wandb_init.py:_log_setup():533] Logging internal logs to D:\github\Cricket-Prediction\training\pytorch\wandb\run-20241104_173947-ddssu9ij\logs\debug-internal.log
2024-11-04 17:39:47,014 INFO    MainThread:11924 [wandb_init.py:init():617] calling init triggers
2024-11-04 17:39:47,014 INFO    MainThread:11924 [wandb_init.py:init():624] wandb.init called with sweep_config: {}
config: {'_name': 'wandb.config', '__doc__': 'Config object.\n\n    Config objects are intended to hold all of the hyperparameters associated with\n    a wandb run and are saved with the run object when `wandb.init` is called.\n\n    We recommend setting `wandb.config` once at the top of your training experiment or\n    setting the config as a parameter to init, ie. `wandb.init(config=my_config_dict)`\n\n    You can create a file called `config-defaults.yaml`, and it will automatically be\n    loaded into `wandb.config`. See https://docs.wandb.com/guides/track/config#file-based-configs.\n\n    You can also load a config YAML file with your custom name and pass the filename\n    into `wandb.init(config="special_config.yaml")`.\n    See https://docs.wandb.com/guides/track/config#file-based-configs.\n\n    Examples:\n        Basic usage\n        ```\n        wandb.config.epochs = 4\n        wandb.init()\n        for x in range(wandb.config.epochs):\n            # train\n        ```\n\n        Using wandb.init to set config\n        ```\n        wandb.init(config={"epochs": 4, "batch_size": 32})\n        for x in range(wandb.config.epochs):\n            # train\n        ```\n\n        Nested configs\n        ```\n        wandb.config[\'train\'][\'epochs\'] = 4\n        wandb.init()\n        for x in range(wandb.config[\'train\'][\'epochs\']):\n            # train\n        ```\n\n        Using absl flags\n        ```\n        flags.DEFINE_string("model", None, "model to run") # name, default, help\n        wandb.config.update(flags.FLAGS) # adds all absl flags to config\n        ```\n\n        Argparse flags\n        ```python\n        wandb.init()\n        wandb.config.epochs = 4\n\n        parser = argparse.ArgumentParser()\n        parser.add_argument(\n            "-b",\n            "--batch-size",\n            type=int,\n            default=8,\n            metavar="N",\n            help="input batch size for training (default: 8)",\n        )\n        args = parser.parse_args()\n        wandb.config.update(args)\n        ```\n\n        Using TensorFlow flags (deprecated in tensorflow v2)\n        ```python\n        flags = tf.app.flags\n        flags.DEFINE_string("data_dir", "/tmp/data")\n        flags.DEFINE_integer("batch_size", 128, "Batch size.")\n        wandb.config.update(flags.FLAGS)  # adds all of the tensorflow flags to config\n        ```\n    '}
2024-11-04 17:39:47,015 INFO    MainThread:11924 [wandb_init.py:init():667] starting backend
2024-11-04 17:39:47,015 INFO    MainThread:11924 [wandb_init.py:init():671] sending inform_init request
2024-11-04 17:39:47,016 INFO    MainThread:11924 [backend.py:_multiprocessing_setup():104] multiprocessing start_methods=spawn, using: spawn
2024-11-04 17:39:47,017 INFO    MainThread:11924 [wandb_init.py:init():684] backend started and connected
2024-11-04 17:39:47,019 INFO    MainThread:11924 [wandb_init.py:init():779] updated telemetry
2024-11-04 17:39:47,073 INFO    MainThread:11924 [wandb_init.py:init():812] communicating run to backend with 90.0 second timeout
2024-11-04 17:39:47,589 INFO    MainThread:11924 [wandb_init.py:init():863] starting run threads in backend
2024-11-04 17:39:47,745 INFO    MainThread:11924 [wandb_run.py:_console_start():2465] atexit reg
2024-11-04 17:39:47,745 INFO    MainThread:11924 [wandb_run.py:_redirect():2313] redirect: wrap_raw
2024-11-04 17:39:47,745 INFO    MainThread:11924 [wandb_run.py:_redirect():2378] Wrapping output streams.
2024-11-04 17:39:47,745 INFO    MainThread:11924 [wandb_run.py:_redirect():2403] Redirects installed.
2024-11-04 17:39:47,748 INFO    MainThread:11924 [wandb_init.py:init():907] run started, returning control to user process
2024-11-04 17:39:47,750 WARNING MsgRouterThr:11924 [router.py:message_loop():77] message_loop has been closed
